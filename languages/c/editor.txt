
Some minor fixes to AE that allow AE to be named "ae", "AE", "ea", and "EA"
(basically a catch all for either DOS or UNIX).  Also the default constants
are now conditionaly hardwired into the source, in case people like me
forget to mention how to build AE.  Read further for more details.

-ant

----
Anthony's Editor March 92
=========================

AE'91, in its obfuscated form, won "Best Utility" in the 1991 International
Obfuscated C Code Contest.  The two files in this distribution are the
un-obfuscated (readable) form of AE'92 and the manual page.

AE'92 merges two schools of thought by providing both VI style (modual)
and EMACS style (modeless) editing interfaces.  One can start an editor
session in one style or the other and switch during a session.  Also
AE'92 now use the standard I/O library to allow for more portability to
unusual machines.

AE'92 is simple enough that anyone can modify it to add features.  The
source is in the Public Domain, so people are free to modify and use
as they see fit.  

e.g.
        o  Tutorials on the Buffer Gap Scheme and/or editor design.
        o  A basis for an editor that can be built into a project.
        o  An editor for novice users.

AE has been know to compile on a wide variety of machines and compilers
like BSD and System V Unix with GNU C, PC mahcines with WatCom C or Turbo C,
and ATARI ST machines with Sozobon C.  Any machine that provides at least
K&R C and a CURSES library should have no trouble getting AE to compile.

To build AE on System V equivalent systems, type

        cc -o ae ae.c -lcurses

To build AE on BSD equivalent systems, type

        cc -o ae ae.c -lcurses -ltermcap

If the constants BUF or HUP are not defined on the compile command line
then the defaults used are

        BUF = 32767
        HUP = "ae.hup"

Please take note of the BUG section of the manual.  

Anthony Howe
a...@mks.com

----eaea.c----
/*
 *        ae.c                Anthony's Editor  Mar '92
 *
 *        Public Domain 1991, 1992 by Anthony Howe.  All rights released.
 */

#include <ctype.h>
#include <curses.h>
#include <stdio.h>
#include <string.h>

#ifndef BUF
#define BUF        32767
#endif /* BUF */

#ifndef HUP
#define HUP        "ae.hup"
#endif /* HUP */

typedef struct keytable_t {
        int key;
        void (*func)();
} keytable_t;

int done;
int row, col;
int index, page, epage;
int input;
char buf[BUF];
char *ebuf;
char *gap = buf;
char *egap;
char *filename;
keytable_t *table;

/*
 *        The following assertions must be maintained.
 *
 *        o  buf <= gap <= egap <= ebuf
 *                If gap == egap then the buffer is full.
 *
 *        o  point = ptr(index) and point < gap or egap <= point
 *
 *        o  page <= index < epage
 *
 *        o  0 <= index <= pos(ebuf) <= BUF
 *
 *
 *        Memory representation of the file:
 *
 *                low        buf  -->+----------+
 *                                |  front   |
 *                                | of file  |
 *                        gap  -->+----------+<-- character not in file
 *                                |   hole   |
 *                        egap -->+----------+<-- character in file
 *                                |   back   |
 *                                | of file  |
 *                high        ebuf -->+----------+<-- character not in file
 *
 *
 *        point & gap
 *
 *        The Point is the current cursor position while the Gap is the
 *        position where the last edit operation took place. The Gap is
 *        ment to be the cursor but to avoid shuffling characters while
 *        the cursor moves it is easier to just move a pointer and when
 *        something serious has to be done then you move the Gap to the
 *        Point.
 *
 *
 *        Use of stdio for portability.
 *
 *        Stdio will handle the necessary conversions of text files to
 *        and from a machine specific format.  Things like fixed length
 *        records; CRLF mapping into <newline> (\n) and back again;
 *        null padding; control-Z end-of-file marks; and other assorted
 *        bizare issues that appear on many unusual machines.
 *
 *        AE is meant to be simple in both code and usage.  With that
 *        in mind certain assumptions are made.
 *
 *        Reading:  If a file can not be opened, assume that it is a
 *        new file.  If an error occurs, fall back to a safe state and
 *        assume an empty file.  fread() is typed size_t which is an
 *        unsigned number.  Zero (0) would indicate a read error or an
 *        empty file.  A return value less than BUF is alright, since
 *        we asked for the maximum allowed.
 *
 *        Writing:  If the file can not be opened or a write error occurs,
 *        then we scramble and save the user's changes in a file called
 *        ae.hup.  If ae.hup fails to open or a write error occurs, then
 *        we assume that shit happens.
 *
 */

int adjust();
int nextline();
int pos();
int prevline();
int save();
char *ptr();

void backsp();
void bottom();
void delete();
void display();
void down();
void file();
void insert();
void insert_mode();
void left();
void lnbegin();
void lnend();
void movegap();
void pgdown();
void pgup();
void redraw();
void right();
void quit();
void flip();
void top();
void up();
void wleft();
void wright();

#undef CTRL
#define CTRL(x)                ((x) & 0x1f)

keytable_t modeless[] = {
        { KEY_LEFT, left },
        { KEY_RIGHT, right },
        { KEY_DOWN, down },
        { KEY_UP, up },
        { CTRL('w'), wleft },
        { CTRL('e'), wright },
        { CTRL('n'), pgdown },
        { CTRL('p'), pgup },
        { CTRL('a'), lnbegin },
        { CTRL('d'), lnend },
        { CTRL('t'), top },
        { CTRL('b'), bottom },
        { KEY_BACKSPACE, backsp },
        { '\b', backsp },
        { KEY_DC, delete },
        { CTRL('f'), file },
        { CTRL('r'), redraw },
        { CTRL('\\'), quit },
        { CTRL('z'), flip },
        { 0, insert }
};

keytable_t modual[] = {
        { 'h', left },
        { 'j', down },
        { 'k', up },
        { 'l', right },
        { 'H', wleft },
        { 'J', pgdown },
        { 'K', pgup },
        { 'L', wright },
        { '[', lnbegin },
        { ']', lnend },
        { 't', top },
        { 'b', bottom },
        { 'i', insert_mode },
        { 'x', delete },
        { 'W', file },
        { 'R', redraw },
        { 'Q', quit },
        { 'Z', flip },
        { 0, movegap }
};


char *
ptr(offset)
int offset;
{
        if (offset < 0)
                return (buf);
        return (buf+offset + (buf+offset < gap ? 0 : egap-gap));
}

int
pos(pointer)
char *pointer;
{
        return (pointer-buf - (pointer < egap ? 0 : egap-gap));
}

void
top()
{
        index = 0;
}

void
bottom()
{
        epage = index = pos(ebuf);
}

void
quit()
{
        done = 1;
}

void
redraw()
{
        clear();
        display();
}

void
movegap()
{
        char *p = ptr(index);
        while (p < gap)
                *--egap = *--gap;
        while (egap < p)
                *gap++ = *egap++;
        index = pos(egap);
}

int
prevline(offset)
int offset;
{
        char *p;
        while (buf < (p = ptr(--offset)) && *p != '\n')
                ;
        return (buf < p ? ++offset : 0);
}

int
nextline(offset)
int offset;
{
        char *p;
        while ((p = ptr(offset++)) < ebuf && *p != '\n')        
                ;
        return (p < ebuf ? offset : pos(ebuf));
}

int
adjust(offset, column)
int offset, column;
{
        char *p;
        int i = 0;
        while ((p = ptr(offset)) < ebuf && *p != '\n' && i < column) {
                i += *p == '\t' ? 8-(i&7) : 1;
                ++offset;
        }
        return (offset);
}

void
left()
{
        if (0 < index)
                --index;
}

void
right()
{
        if (index < pos(ebuf))
                ++index;
}

void
up()
{
        index = adjust(prevline(prevline(index)-1), col);
}

void
down()
{
        index = adjust(nextline(index), col);
}

void
lnbegin()
{
        index = prevline(index);
}

void
lnend()
{
        index = nextline(index);
        left();
}

void
wleft()
{
        char *p;
        while (!isspace(*(p = ptr(index))) && buf < p)
                --index;
        while (isspace(*(p = ptr(index))) && buf < p)
                --index;
}

void
pgdown()
{
        page = index = prevline(epage-1);
        while (0 < row--)
                down();
        epage = pos(ebuf);
}

void
pgup()
{
        int i = LINES;
        while (0 < --i) {
                page = prevline(page-1);
                up();
        }
}

void
wright()
{
        char *p;
        while (!isspace(*(p = ptr(index))) && p < ebuf)
                ++index;
        while (isspace(*(p = ptr(index))) && p < ebuf)
                ++index;
}

void
insert()
{
        movegap();
        if (gap < egap)
                *gap++ = input == '\r' ? '\n' : input;
        index = pos(egap);
}

void
insert_mode()
{
        int ch;
        movegap();
        while ((ch = getch()) != '\f') {
                if (ch == '\b') {
                        if (buf < gap)
                                --gap;
                } else if (gap < egap) {
                        *gap++ = ch == '\r' ? '\n' : ch;
                }
                index = pos(egap);
                display();
        }
}

void
backsp()
{
        movegap();
        if (buf < gap)
                --gap;
        index = pos(egap);
}

void
delete()
{
        movegap();
        if (egap < ebuf)
                index = pos(++egap);
}

void
file()
{
        if (!save(filename))
                save(HUP);
}

int
save(fn)
char *fn;
{
        FILE *fp;
        int i, ok;
        size_t length;
        fp = fopen(fn, "w");
        if ((ok = fp != NULL)) {
                i = index;
                index = 0;
                movegap();
                length = (size_t) (ebuf-egap);
                ok = fwrite(egap, sizeof (char), length, fp) == length;
                (void) fclose(fp);
                index = i;
        }
        return (ok);
}

void
flip()
{
        table = table == modual ? modeless : modual;
}

void
display()
{
        char *p;
        int i, j;
        if (index < page)
                page = prevline(index);
        if (epage <= index) {
                page = nextline(index);
                i = page == pos(ebuf) ? LINES-2 : LINES;
                while (0 < i--)
                        page = prevline(page-1);
        }
        move(0, 0);
        i = j = 0;
        epage = page;
        while (1) {
                if (index == epage) {
                        row = i;
                        col = j;
                }
                p = ptr(epage);
                if (LINES <= i || ebuf <= p)
                        break;
                if (*p != '\r') {
                        addch(*p);
                        j += *p == '\t' ? 8-(j&7) : 1;
                }
                if (*p == '\n' || COLS <= j) {
                        ++i;
                        j = 0;
                }
                ++epage;
        }
        clrtobot();
        if (++i < LINES)
                mvaddstr(i, 0, "<< EOF >>");
        move(row, col);
        refresh();
}

int
main(argc, argv)
int argc;
char **argv;
{
        FILE *fp;
        char *p = *argv;
        int i = (int) strlen(p);
        egap = ebuf = buf + BUF;
        if (argc < 2)
                return (2);
        /* Find basename. */
        while (0 <= i && p[i] != '\\' && p[i] != '/')
                --i;
        p += i+1;
        if (strncmp(p, "ae", 2) == 0 || strncmp(p, "AE", 2) == 0)
                table = modual;
        else if (strncmp(p, "ea", 2) == 0 || strncmp(p, "EA", 2) == 0)
                table = modeless;
        else
                return (2);
        if (initscr() == NULL)
                return (3);
        raw();
        noecho();
        idlok(stdscr, 1);
        keypad(stdscr, 1);
        fp = fopen(filename = *++argv, "r");
        if (fp != NULL) {
                gap += fread(buf, sizeof (char), (size_t) BUF, fp);
                fclose(fp);
        }
        top();
        while (!done) {
                display();
                i = 0;
                input = getch();
                while (table[i].key != 0 && input != table[i].key)
                        ++i;
                (*table[i].func)();
        }
        endwin();
        return (0);
}
----ea.man---
NAME
        ae        Ant's Editor  Mar '92


USAGE
        ae <filename>        
        ea <filename>

where <filename> is the text file to edit or create.


DESCRIPTION
<< ae >> is a full screen, VI style text editor.  The source should be
portable to any environment that provides a K&R C compiler and a
CURSES library.  << ea >> is a full screen, EMACS style text editor.

Text files consists of lines of printable text or tab characters.  
A line can be of arbitary length and is delimited by either a
newline or the end of file.  Carriage return is mapped to newline
on input and ignored on output.  Tab stops are every eight columns.
Non-printable characters may have unpredictable results depending
on the implementation of CURSES.


COMMANDS

VI STYLE
h j k l                left, down, up, right cursor movement
H J K L                word left, page down, page up, word right
[ ]                beginning and end of line
t b                top and bottom of file
i                enter insert mode, formfeed to quit
x                delete character under the cursor
W                write buffer to file
R                refresh the screen
Q                quit
Z                switch to EMACS style

EMACS STYLE
cursor keys        left, down, up, right cursor movement
^W ^E                word left,  word right
^N ^P                page down, page up
^A ^D                beginning and end of line
^T ^B                top and bottom of file
backspace        delete character left of the cursor
delete                delete character under the cursor
^F                write buffer to file
