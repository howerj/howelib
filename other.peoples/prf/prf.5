.TH prf 5 "January 2001" "Version 1.0" "File Formats"
.SH NAME
prf \- polychrome recursive format (image file format)
.SH DESCRIPTION
The polychrome recursive format is an extension of Russell Marks'
.IR mrf (5)
(monochrome file format) to include grayscale and (mainly for the sake
of completeness) color image. While it does not generally compress as
well as
.B mrf
(relatively speaking), it retains the benefits of being easy to
implement and requiring little overhead.
.P
A prf file begins with the following header
.P
.TP
.PD 0
Offset
Description
.TP
0
magic number - "PRF1" (in ASCII)
.TP
4
width (32-bit, MSB first)
.TP
8
height (same)
.TP
12
number of bits per pixel, less one (max. of 31)
.TP
13
image data
.PD 1
.P
The image data, begining at the 13th byte and continuing to the end of
the file, is a bitstream. Like the header data, multibit values are
always stored big-endian.
.P
As with
.BR mrf ,
the image is treated as a number of 64x64 squares, forming a grid
large enough to completely cover it. Each of these squares in turn (in
left-to-right, top-to-bottom order) can be recursively subdivided into
four sub-squares, all the way down to individual pixels.
.P
For every square, its pixels are checked to see if they have one or
more upper (i.e., most significant) bits in common. If they do, these
common bits are output before recursing, and are then ignored when
testing for further common bits in the sub-squares. Recursion bottoms
out when all the pixels in a square are the same color (which
might not happen until the square is a single pixel).
.P
The following pseudocode gives a rough outline of the recursive
procedure. When the procedure is first called, the square size equals
64x64, and N equals the number of bits per pixel.
.P
If square size equals 1x1, output the N lowest bits of
.br
    the pixel and return
.br
Count the number of upper bits shared by all pixels in
.br
    the square
.br
Output this count, followed by the common bits (if any)
.br
Subtract this count from N
.br
If N is zero, return
.br
Divide the square into four quarters, calling routine for
.br
    each in this order: top-left, top-right, bottom-left,
.br
    bottom-right
.P
There are two details omitted in the above pseudocode.
.P
The first is the number of bits used to output the count of common
bits. This number is always the smallest number of bits needed to
encode N + 1 values (i.e., the range 0..N inclusive). For example,
when N equals 8, the count can range from 0 to 8, so four bits will be
used. If N drops to 7, then no more than three bits will be used
subsequently.
.P
The second detail concerns the right-most and bottom-most squares of
the image. Unless the image's dimensions are exactly divisible by 64,
some squares may be entirely outside the region of the image. These
squares are omitted from the bitstream. (Squares that lie partially
inside and partially outside the image are encoded normally. Pixels
inside these squares but outside the image are indeterminate, and the
encoding program can treat them as having whatever values provide the
best compression.)
.SH COLOR IMAGES
Color images are handled by separating out the different color planes.
Each plane is separately encoded in the manner described. In the file,
the planes are broken up into rows, each row being 64 pixels high, and
the rows are then interleaved in the order red, blue, green (an alpha
channel can also appear as the fourth plane). Thus, immediately
following the upper-right square for the red plane would be the
upper-left square for the green plane, and so on.
.P
Color images are indicated by storing the number of planes, less one,
in the upper three bits of the 12th byte of the header.
.SH SEE ALSO
.IR mrf (5),
.IR pnmtoprf (1),
.IR prftopnm (1),
.IR prffile (1)
.SH AUTHOR
Brian Raiter
.IR <breadbox@muppetlabs.com> .
